{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:3000/api';\n\n// Configuração do axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para adicionar token de autenticação\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    if (config.headers) config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para tratar respostas\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Tipos baseados na estrutura real da API\n\n// Tipos para paginação\n\n// Serviços de autenticação\nexport const authService = {\n  async login(email, senha) {\n    const response = await api.post('/auth/login', {\n      email,\n      senha\n    });\n    return response.data;\n  },\n  async register(nome, email, senha) {\n    const response = await api.post('/auth/register', {\n      nome,\n      email,\n      senha\n    });\n    return response.data;\n  }\n};\n\n// Serviços de produtos\nexport const produtoService = {\n  async listar(page = 1, limit = 10, categoria) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (categoria) params.append('categoria', categoria);\n    const response = await api.get(`/produtos?${params}`);\n    return response.data;\n  },\n  async criar(produto) {\n    const response = await api.post('/produtos', produto);\n    return response.data;\n  },\n  async atualizar(id, produto) {\n    const response = await api.patch(`/produtos/${id}`, produto);\n    return response.data;\n  },\n  async deletar(id) {\n    await api.delete(`/produtos/${id}`);\n  },\n  async obterPorId(id) {\n    const response = await api.get(`/produtos/${id}`);\n    return response.data;\n  },\n  async obterMaisVendidos(limit = 10) {\n    const response = await api.get(`/produtos/mais-vendidos?limit=${limit}`);\n    return response.data;\n  },\n  async obterPorCategoria(categoria) {\n    const response = await api.get(`/produtos/categoria/${categoria}`);\n    return response.data;\n  }\n};\n\n// Serviços de vendas\nexport const vendaService = {\n  async listar(page = 1, limit = 10, dataInicio, dataFim) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (dataInicio) params.append('dataInicio', dataInicio);\n    if (dataFim) params.append('dataFim', dataFim);\n    const response = await api.get(`/vendas?${params}`);\n    return response.data;\n  },\n  async criar(venda) {\n    const response = await api.post('/vendas', venda);\n    return response.data;\n  },\n  async atualizar(id, venda) {\n    const response = await api.patch(`/vendas/${id}`, venda);\n    return response.data;\n  },\n  async deletar(id) {\n    await api.delete(`/vendas/${id}`);\n  },\n  async obterPorId(id) {\n    const response = await api.get(`/vendas/${id}`);\n    return response.data;\n  },\n  async obterPorPeriodo(dataInicio, dataFim) {\n    const response = await api.get(`/vendas/periodo?dataInicio=${dataInicio}&dataFim=${dataFim}`);\n    return response.data;\n  },\n  async obterResumoMensal(mes, ano) {\n    const response = await api.get(`/vendas/resumo-mensal?mes=${mes}&ano=${ano}`);\n    return response.data;\n  }\n};\n\n// Serviços de relatórios\nexport const relatorioService = {\n  async dashboard() {\n    const response = await api.get('/relatorios/dashboard');\n    return response.data;\n  },\n  async comparativoMensal(ano) {\n    const response = await api.get(`/relatorios/comparativo-mensal?ano=${ano}`);\n    return response.data;\n  },\n  async detalhado(mes, ano) {\n    const response = await api.get(`/relatorios/detalhado?mes=${mes}&ano=${ano}`);\n    return response.data;\n  },\n  async exportar(formato, mes, ano) {\n    const params = new URLSearchParams({\n      formato\n    });\n    if (mes) params.append('mes', mes.toString());\n    if (ano) params.append('ano', ano.toString());\n    const response = await api.get(`/relatorios/exportar?${params}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","email","senha","post","data","register","nome","produtoService","listar","page","limit","categoria","params","URLSearchParams","toString","append","get","criar","produto","atualizar","id","patch","deletar","delete","obterPorId","obterMaisVendidos","obterPorCategoria","vendaService","dataInicio","dataFim","venda","obterPorPeriodo","obterResumoMensal","mes","ano","relatorioService","dashboard","comparativoMensal","detalhado","exportar","formato","responseType"],"sources":["/home/emano/PROJETO/vendas-api-frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:3000/api';\n\n// Configuração do axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para adicionar token de autenticação\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      if(config.headers)\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para tratar respostas\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Tipos baseados na estrutura real da API\nexport interface User {\n  id: number;\n  nome: string;\n  email: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Produto {\n  id: number;\n  nome: string;\n  descricao?: string;\n  preco: string; // A API retorna como string\n  categoria?: string;\n  ativo: boolean;\n  usuarioId: number;\n  createdAt: string;\n  updatedAt: string;\n  _count?: {\n    vendas: number;\n  };\n}\n\nexport interface Venda {\n  id: number;\n  produtoId: number;\n  quantidade: number;\n  valorUnit: string; // A API retorna como string\n  valorTotal: string; // A API retorna como string\n  dataVenda: string;\n  observacoes?: string;\n  usuarioId: number;\n  createdAt: string;\n  updatedAt: string;\n  produto: {\n    id: number;\n    nome: string;\n    categoria?: string;\n  };\n}\n\nexport interface Dashboard {\n  resumoMensal: {\n    totalVendas: number;\n    quantidadeVendas: number;\n    ticketMedio: number;\n  };\n  resumoAnual: {\n    totalVendas: number;\n    quantidadeVendas: number;\n    ticketMedio: number;\n  };\n  produtosMaisVendidos: Array<{\n    produto: {\n      nome: string;\n      categoria?: string;\n    };\n    quantidadeVendida: number;\n    valorTotal: string;\n  }>;\n  vendasPorCategoria: Record<string, {\n    quantidade: number;\n    valor: number;\n  }>;\n  vendasPorDia: Record<string, number>;\n}\n\n// Tipos para paginação\nexport interface PaginatedResponse<T> {\n  data: T[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n// Serviços de autenticação\nexport const authService = {\n  async login(email: string, senha: string) {\n    const response = await api.post('/auth/login', { email, senha });\n    return response.data;\n  },\n\n  async register(nome: string, email: string, senha: string) {\n    const response = await api.post('/auth/register', { nome, email, senha });\n    return response.data;\n  },\n};\n\n// Serviços de produtos\nexport const produtoService = {\n  async listar(page = 1, limit = 10, categoria?: string): Promise<PaginatedResponse<Produto>> {\n    const params = new URLSearchParams({ \n      page: page.toString(), \n      limit: limit.toString() \n    });\n    if (categoria) params.append('categoria', categoria);\n    \n    const response = await api.get(`/produtos?${params}`);\n    return response.data as PaginatedResponse<Produto>;\n  },\n\n  async criar(produto: {\n    nome: string;\n    descricao?: string;\n    preco: number;\n    categoria?: string;\n    ativo?: boolean;\n  }): Promise<Produto> {\n    const response = await api.post('/produtos', produto);\n    return response.data as Produto;\n  },\n\n  async atualizar(id: number, produto: Partial<{\n    nome: string;\n    descricao?: string;\n    preco: number;\n    categoria?: string;\n    ativo?: boolean;\n  }>): Promise<Produto> {\n    const response = await api.patch(`/produtos/${id}`, produto);\n    return response.data as Produto;\n  },\n\n  async deletar(id: number): Promise<void> {\n    await api.delete(`/produtos/${id}`);\n  },\n\n  async obterPorId(id: number): Promise<Produto> {\n    const response = await api.get(`/produtos/${id}`);\n    return response.data as Produto;\n  },\n\n  async obterMaisVendidos(limit = 10): Promise<Produto[]> {\n    const response = await api.get(`/produtos/mais-vendidos?limit=${limit}`);\n    return response.data as Produto[];\n  },\n\n  async obterPorCategoria(categoria: string): Promise<Produto[]> {\n    const response = await api.get(`/produtos/categoria/${categoria}`);\n    return response.data as Produto[];\n  },\n};\n\n// Serviços de vendas\nexport const vendaService = {\n  async listar(\n    page = 1, \n    limit = 10, \n    dataInicio?: string, \n    dataFim?: string\n  ): Promise<PaginatedResponse<Venda>> {\n    const params = new URLSearchParams({ \n      page: page.toString(), \n      limit: limit.toString() \n    });\n    if (dataInicio) params.append('dataInicio', dataInicio);\n    if (dataFim) params.append('dataFim', dataFim);\n    \n    const response = await api.get(`/vendas?${params}`);\n    return response.data as PaginatedResponse<Venda>;\n  },\n\n  async criar(venda: {\n    produtoId: number;\n    quantidade: number;\n    dataVenda: string;\n    observacoes?: string;\n  }): Promise<Venda> {\n    const response = await api.post('/vendas', venda);\n    return response.data as Venda;\n  },\n\n  async atualizar(id: number, venda: Partial<{\n    produtoId: number;\n    quantidade: number;\n    dataVenda: string;\n    observacoes?: string;\n  }>): Promise<Venda> {\n    const response = await api.patch(`/vendas/${id}`, venda);\n    return response.data as Venda;\n  },\n\n  async deletar(id: number): Promise<void> {\n    await api.delete(`/vendas/${id}`);\n  },\n\n  async obterPorId(id: number): Promise<Venda> {\n    const response = await api.get(`/vendas/${id}`);\n    return response.data as Venda;\n  },\n\n  async obterPorPeriodo(dataInicio: string, dataFim: string): Promise<Venda[]> {\n    const response = await api.get(`/vendas/periodo?dataInicio=${dataInicio}&dataFim=${dataFim}`);\n    return response.data as Venda[];\n  },\n\n  async obterResumoMensal(mes: number, ano: number): Promise<any> {\n    const response = await api.get(`/vendas/resumo-mensal?mes=${mes}&ano=${ano}`);\n    return response.data;\n  },\n};\n\n// Serviços de relatórios\nexport const relatorioService = {\n  async dashboard(): Promise<Dashboard> {\n    const response = await api.get('/relatorios/dashboard');\n    return response.data as Dashboard;\n  },\n\n  async comparativoMensal(ano: number): Promise<any> {\n    const response = await api.get(`/relatorios/comparativo-mensal?ano=${ano}`);\n    return response.data;\n  },\n\n  async detalhado(mes: number, ano: number): Promise<any> {\n    const response = await api.get(`/relatorios/detalhado?mes=${mes}&ano=${ano}`);\n    return response.data;\n  },\n\n  async exportar(formato: 'json' | 'csv', mes?: number, ano?: number): Promise<Blob> {\n    const params = new URLSearchParams({ formato });\n    if (mes) params.append('mes', mes.toString());\n    if (ano) params.append('ano', ano.toString());\n    \n    const response = await api.get(`/relatorios/exportar?${params}`, {\n      responseType: 'blob'\n    });\n    return response.data as Blob;\n  },\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}